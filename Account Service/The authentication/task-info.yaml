type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import java.util.*;
    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class User {
      private String name;
      private String lastname;
      private String email;
      private String password;

      public User(User another) {
        this(another.name, another.lastname, another.email, another.password);
      }

      public User(String name, String lastname, String email, String password) {
        this.name = name;
        this.lastname = lastname;
        this.email = email;
        this.password = password;
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public String getName() {
        return name;
      }

      public User setName(String name) {
        this.name = name;
        return this;
      }

      public String getLastname() {
        return lastname;
      }

      public User setLastname(String lastname) {
        this.lastname = lastname;
        return this;
      }

      public String getEmail() {
        return email;
      }

      public User setEmail(String email) {
        this.email = email;
        return this;
      }

      public String getPassword() {
        return password;
      }

      public User setPassword(String password) {
        this.password = password;
        return this;
      }
    }

    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String paymentApi = "/api/empl/payment";
      private final User johnDoe = new User("John", "Doe", "JohnDoe@acme.com", "secret");
      private final User maxMustermann = new User("Max", "Mustermann", "MaxMustermann@acme.com", "secret");
      private final User captainNemo = new User("Captain", "Nemo", "nautilus@pompilius.com", "wings");
      private final String johnDoeCorrectUser = johnDoe.toJson();
      private final String johnDoeEmptyName = new User(johnDoe).setName("").toJson();
      private final String johnDoeNoName = new User(johnDoe).setName(null).toJson();
      private final String johnDoeEmptyLastName = new User(johnDoe).setLastname("").toJson();
      private final String johnDoeNoLastName = new User(johnDoe).setLastname(null).toJson();
      private final String johnDoeEmptyEmail = new User(johnDoe).setEmail("").toJson();
      private final String johnDoeNoEmail = new User(johnDoe).setLastname(null).toJson();
      private final String johnDoeEmptyPassword = new User(johnDoe).setPassword("").toJson();
      private final String johnDoeNoPassword = new User(johnDoe).setPassword(null).toJson();
      private final String johnDoeWrongEmail1 = new User(johnDoe).setEmail("johndoeacme.com").toJson();
      private final String johnDoeWrongEmail2 = new User(johnDoe).setEmail("johndoe@google.com").toJson();
      private final String maxMustermannCorrectUser = maxMustermann.toJson();
      private final String johnDoeCorrectUserLower = new User(johnDoe).setEmail(johnDoe.getEmail().toLowerCase()).toJson();
      private final String maxMustermannCorrectUserLower = new User(maxMustermann).setEmail(maxMustermann.getEmail().toLowerCase()).toJson();
      private final String johnDoeWrongPassword = new User(johnDoe).setPassword("none").toJson();
      private final String johnDoeWrongPasswordCaseSensitive = new User(johnDoe).setPassword(johnDoe.getPassword().toUpperCase()).toJson();
      private final String maxMustermannWrongPassword = new User(maxMustermann).setPassword("none").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();

      List<Integer> userIdList = new ArrayList<>();

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      /**
       * Method for checking status code of response Post request for API
       *
       * @param api testing api (String)
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostApi(String api, String body, int status, String message) {
        HttpResponse response = post(api, body).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking status code of response Get request for API
       *
       * @param api testing api (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testGetApi(String api, int status, String message) {
        HttpResponse response = get(api).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status) {
        HttpResponse response = post(signUpApi, body).send();
        testPostApi(signUpApi, body, status, "API must be available");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }


        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString()))));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString();
        HttpResponse response = get(paymentApi).basicAuth(login, password).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("Get " + paymentApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Authentication with " + login + " / " + password);
        }
        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("id", isInteger())
                          .value("name", userJson.get("name").getAsString())
                          .value("lastname", userJson.get("lastname").getAsString())
                          .value("email", isString(s -> s.equalsIgnoreCase(userJson.get("email").getAsString()))));
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing duplicate users
       *
       * @param user string representation of user information in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserDuplicates(String user) {
        HttpResponse response = post(signUpApi, user).send();
        // Check error message field in JSON response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("status", 400)
                        .value("error", "Bad Request")
                        .value("message", "User exist!")
                        .anyOtherValues());
        return CheckResult.correct();
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Test user registration on signup api
              () -> testPostSignUpResponse(johnDoeCorrectUser, 200),
              () -> testPostApi(signUpApi, johnDoeCorrectUser, 400, "User must be unique!"),
              () -> testUserDuplicates(johnDoeCorrectUser),
              () -> testPostApi(signUpApi, johnDoeCorrectUserLower, 400, "User must be unique (ignorecase)!"),
              () -> testPostSignUpResponse(maxMustermannCorrectUserLower, 200),
              () -> testPostApi(signUpApi, maxMustermannCorrectUserLower, 400, "User must be unique!"),
              () -> testPostApi(signUpApi, maxMustermannCorrectUser, 400, "User must be unique (ignorecase)!"),

              // Test wrong POST request for signup api
              () -> testPostApi(signUpApi, johnDoeEmptyName, 400, "Empty name field!"),
              () -> testPostApi(signUpApi, johnDoeNoName, 400, "Name field is absent!"),
              () -> testPostApi(signUpApi, johnDoeEmptyLastName, 400, "Empty lastname field!"),
              () -> testPostApi(signUpApi, johnDoeNoLastName, 400, "Lastname field is absent!"),
              () -> testPostApi(signUpApi, johnDoeEmptyEmail, 400, "Empty email field!"),
              () -> testPostApi(signUpApi, johnDoeNoEmail, 400, "Email field is absent!"),
              () -> testPostApi(signUpApi, johnDoeEmptyPassword, 400, "Empty password field!"),
              () -> testPostApi(signUpApi, johnDoeNoPassword, 400, "Password field is absent!"),
              () -> testPostApi(signUpApi, johnDoeWrongEmail1, 400, "Wrong email!"),
              () -> testPostApi(signUpApi, johnDoeWrongEmail2, 400, "Wrong email!"),

              // Test authentication, positive tests
              () -> testUserRegistration(johnDoeCorrectUserLower, 200, "User must login!"),
              () -> testUserRegistration(johnDoeCorrectUser, 200, "Login case insensitive!"),
              () -> testUserRegistration(maxMustermannCorrectUserLower, 200, "User must login!"),
              () -> testUserRegistration(maxMustermannCorrectUser, 200, "Login case insensitive!"),

              // Test authentication, negative tests
              () -> testUserRegistration(johnDoeWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(johnDoeWrongPasswordCaseSensitive, 401,
                      "Password must be case sensitive!"),
              () -> testUserRegistration(johnDoeWrongEmail1, 401, "Wrong user!"),
              () -> testUserRegistration(maxMustermannWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"),
              () -> testGetApi(paymentApi, 401, "This api only for authenticated user"),

              // Test persistence
              () -> restartApplication(),
              () -> testUserRegistration(johnDoeCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."),
      };
    }
  learner_created: false
- name: src/account/controllers/Service.java
  visible: true
  text: |
    package account.controllers;

    public class Service {
    }
  learner_created: true
- name: src/account/model/User.java
  visible: true
  text: |
    package account.model;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;

    @Entity
    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public class User {

    //    @Id
    //    @JsonIgnore
    //    @GeneratedValue(strategy = GenerationType.AUTO)
    //    private Long id;

        @Id
        @Column
        @NotNull
        @NotBlank
        String name;

        @Column
        @NotNull
        @NotBlank
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        String password;

        @Column
        @NotNull
        @NotBlank
        String lastname;

        @Column
        @NotNull
        @NotBlank
        @Pattern(regexp = ".+@acme.com")
        String email;
    }
  learner_created: true
- name: src/account/controllers/AuthController.java
  visible: true
  text: |
    package account.controllers;

    import account.model.User;
    import account.services.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    import javax.servlet.http.HttpServletRequest;
    import javax.validation.Valid;
    import java.time.LocalDate;
    import java.util.LinkedHashMap;
    import java.util.Map;

    @RestController
    @RequestMapping("auth")
    public class AuthController {

        @Autowired
        UserService userService;

        @PostMapping("signup")
        public ResponseEntity<Object> signup(@Valid @RequestBody User user) {
    //        if (userService.findUserByName(user.getName()).isPresent()
    //         && userService.findUserByLastname(user.getLastname()).isPresent()) {
    //            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    //        }
            return new ResponseEntity<>(userService.save(user), HttpStatus.OK);
        }
    }
  learner_created: true
- name: src/account/repositories/UserRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.model.User;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface UserRepository extends CrudRepository<User, Long> {
        Optional<User> findUserByName(String name);

        Optional<User> findUserByLastname(String lastname);
    }
  learner_created: true
- name: src/account/services/UserService.java
  visible: true
  text: |
    package account.services;

    import account.model.User;
    import account.repositories.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import java.util.Optional;

    @Service
    public class UserService {

        @Autowired
        UserRepository userRepository;

        public User save(User user) {
            return userRepository.save(user);
        }

        public Optional<User> findUserByName(String name) {
            return userRepository.findUserByName(name);
        }

        public Optional<User> findUserByLastname(String lastname) {
            return userRepository.findUserByLastname(lastname);
        }
    }
  learner_created: true
- name: src/account/security/WebSecurityConfigurerImpl.java
  visible: true
  learner_created: true
- name: src/account/security/RestAuthenticationEntryPoint.java
  visible: true
  learner_created: true
- name: src/account/exception/UserExistException.java
  visible: true
  learner_created: true
- name: src/account/security/UserDetailsImpl.java
  visible: true
  learner_created: true
- name: src/account/security/UserDetailsServiceImpl.java
  visible: true
  learner_created: true
- name: src/account/controllers/PaymentController.java
  visible: true
  text: |
    package account.controllers;

    public class Business {
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/217/stages/1087/implement#comment
status: Failed
feedback:
  message: "Wrong answer in test #3\n\nThe JSON element should be object, found null\n\
    \nFull JSON:\nnull\n\nPlease find below the output of your program during this\
    \ failed test.\n\n---\n\n.   ____          _            __ _ _\n /\\\\ / ___&#39;_\
    \ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/\
    \ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  &#39;  |____|\
    \ .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n ::\
    \ Spring Boot ::        (v2.3.1.RELEASE)\n\n2022-02-21 12:47:10.526  INFO 1417\
    \ --- [    Test worker] account.AccountServiceApplication        : Starting AccountServiceApplication\
    \ on Ngocs-MBP with PID 1417 (started by ngocvunguyen in /Users/ngocvunguyen/eclipse/Account\
    \ Service/Account Service/task)\n2022-02-21 12:47:10.531  INFO 1417 --- [    Test\
    \ worker] account.AccountServiceApplication        : No active profile set, falling\
    \ back to default profiles: default\n2022-02-21 12:47:11.570  INFO 1417 --- [\
    \    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring\
    \ Data JPA repositories in DEFERRED mode.\n2022-02-21 12:47:11.649  INFO 1417\
    \ --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring\
    \ Data repository scanning in 68ms. Found 1 JPA repository interfaces.\n2022-02-21\
    \ 12:47:12.336  INFO 1417 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat initialized with port(s): 28852 (http)\n2022-02-21 12:47:12.350  INFO\
    \ 1417 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting\
    \ service [Tomcat]\n2022-02-21 12:47:12.350  INFO 1417 --- [    Test worker] org.apache.catalina.core.StandardEngine\
    \  : Starting Servlet engine: [Apache Tomcat/9.0.36]\n2022-02-21 12:47:12.482\
    \  INFO 1417 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/api]    :\
    \ Initializing Spring embedded WebApplicationContext\n2022-02-21 12:47:12.482\
    \  INFO 1417 --- [    Test worker] w.s.c.ServletWebServerApplicationContext :\
    \ Root WebApplicationContext: initialization completed in 1902 ms\n2022-02-21\
    \ 12:47:12.627  INFO 1417 --- [    Test worker] com.zaxxer.hikari.HikariDataSource\
    \       : HikariPool-1 - Starting...\n2022-02-21 12:47:12.865  INFO 1417 --- [\
    \    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start\
    \ completed.\n2022-02-21 12:47:12.874  INFO 1417 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration\
    \    : H2 console available at &#39;/h2&#39;. Database available at &#39;jdbc:h2:file:../service_db&#39;\n\
    2022-02-21 12:47:13.047  INFO 1417 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor\
    \  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;\n2022-02-21\
    \ 12:47:13.104  INFO 1417 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper\
    \  : HHH000204: Processing PersistenceUnitInfo [name: default]\n2022-02-21 12:47:13.143\
    \  WARN 1417 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration :\
    \ spring.jpa.open-in-view is enabled by default. Therefore, database queries may\
    \ be performed during view rendering. Explicitly configure spring.jpa.open-in-view\
    \ to disable this warning\n2022-02-21 12:47:13.209  INFO 1417 --- [         task-1]\
    \ org.hibernate.Version                    : HHH000412: Hibernate ORM core version\
    \ 5.4.17.Final\n2022-02-21 12:47:13.214  INFO 1417 --- [    Test worker] .s.s.UserDetailsServiceAutoConfiguration\
    \ : \n\nUsing generated security password: e7bf379e-63d9-479e-ba72-48f44e503799\n\
    \n2022-02-21 12:47:13.358  INFO 1417 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain\
    \     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@863bd8c,\
    \ org.springframework.security.web.context.SecurityContextPersistenceFilter@39317283,\
    \ org.springframework.security.web.header.HeaderWriterFilter@66b368a7, org.springframework.security.web.authentication.logout.LogoutFilter@7799584d,\
    \ org.springframework.security.web.authentication.www.BasicAuthenticationFilter@6bd199ff,\
    \ org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4e9fcc08,\
    \ org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6e257ddb,\
    \ org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3ee0fa8b,\
    \ org.springframework.security.web.session.SessionManagementFilter@527ba999, org.springframework.security.web.access.ExceptionTranslationFilter@258a642b,\
    \ org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4a520e82]\n\
    2022-02-21 12:47:13.460  INFO 1417 --- [         task-1] o.hibernate.annotations.common.Version\
    \   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}\n2022-02-21 12:47:13.646\
    \  INFO 1417 --- [         task-1] org.hibernate.dialect.Dialect            :\
    \ HHH000400: Using dialect: org.hibernate.dialect.H2Dialect\nHibernate: create\
    \ table user (id bigint not null, email varchar(255) not null, lastname varchar(255)\
    \ not null, name varchar(255) not null, password varchar(255) not null, role varchar(255),\
    \ primary key (id))\nHibernate: create sequence hibernate_sequence start with\
    \ 1 increment by 1\n2022-02-21 12:47:14.558  INFO 1417 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator\
    \       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\n\
    2022-02-21 12:47:14.570  INFO 1417 --- [         task-1] j.LocalContainerEntityManagerFactoryBean\
    \ : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    2022-02-21 12:47:14.657  INFO 1417 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver\
    \      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;\n2022-02-21\
    \ 12:47:14.714  INFO 1417 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat started on port(s): 28852 (http) with context path &#39;/api&#39;\n\
    2022-02-21 12:47:14.715  INFO 1417 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Triggering deferred initialization of Spring Data repositories…\n2022-02-21\
    \ 12:47:15.016  INFO 1417 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Spring Data repositories initialized!\n2022-02-21 12:47:15.029  INFO 1417\
    \ --- [    Test worker] account.AccountServiceApplication        : Started AccountServiceApplication\
    \ in 4.888 seconds (JVM running for 5.739)\n2022-02-21 12:47:15.430  INFO 1417\
    \ --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/api]    : Initializing\
    \ Spring DispatcherServlet &#39;dispatcherServlet&#39;\n2022-02-21 12:47:15.430\
    \  INFO 1417 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        :\
    \ Initializing Servlet &#39;dispatcherServlet&#39;\n2022-02-21 12:47:15.439  INFO\
    \ 1417 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed\
    \ initialization in 9 ms\nHibernate: select user0_.id as id1_0_, user0_.email\
    \ as email2_0_, user0_.lastname as lastname3_0_, user0_.name as name4_0_, user0_.password\
    \ as password5_0_, user0_.role as role6_0_ from user user0_ where upper(user0_.email)=upper(?)\n\
    Hibernate: call next value for hibernate_sequence\nHibernate: insert into user\
    \ (email, lastname, name, password, role, id) values (?, ?, ?, ?, ?, ?)\nHibernate:\
    \ select user0_.id as id1_0_, user0_.email as email2_0_, user0_.lastname as lastname3_0_,\
    \ user0_.name as name4_0_, user0_.password as password5_0_, user0_.role as role6_0_\
    \ from user user0_ where upper(user0_.email)=upper(?)\nHibernate: select user0_.id\
    \ as id1_0_, user0_.email as email2_0_, user0_.lastname as lastname3_0_, user0_.name\
    \ as name4_0_, user0_.password as password5_0_, user0_.role as role6_0_ from user\
    \ user0_ where upper(user0_.email)=upper(?)\nHibernate: select user0_.id as id1_0_,\
    \ user0_.email as email2_0_, user0_.lastname as lastname3_0_, user0_.name as name4_0_,\
    \ user0_.password as password5_0_, user0_.role as role6_0_ from user user0_ where\
    \ upper(user0_.email)=upper(?)"
  time: Mon, 21 Feb 2022 17:47:16 UTC
record: -1
